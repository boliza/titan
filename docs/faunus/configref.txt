[[hadoop-config-ref]]
Configuration Reference
-----------------------

This page is the authoritative reference for Titan-Hadoop configuration options.

The table is automatically generated by traversing the keys and namespaces in Titan's internal configuration management API. Hence, the configuration options as listed on this page are synchronized with a particular Titan release. If a reference to a configuration option in other parts of this documentation is in conflict with its representation on this page, assume the version listed here to be correct.

[[hadoop-config-meta-ns]]
Configuring Input and Output Formats
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The tables below contain two configuration settings that specify the class used to read and write graph data in Titan-Hadoop:

* titan.hadoop.input.format
* titan.hadoop.output.format

Titan-Hadoop comes with several standard implementations of input and output formats, but in general, these options will accept any class that implements InputFormat or OutputFormat with the appropriate type parameters.

To allow passing arbitrary format-specfic configuration data, Titan-Hadoop defines two special option meta-namespaces:

* titan.hadoop.input.conf
* titan.hadoop.output.conf

These prefixes are reserved for arbitrary use by the input and output format implementations.  For instance, when using TitanCassandraOutputFormat, it the output prefix should contain a Titan graph configuration, e.g.:

[source,properties]
----
titan.hadoop.output.format=com.thinkaurelius.titan.hadoop.formats.titan.cassandra.TitanCassandraOutputFormat
titan.hadoop.output.conf.storage.backend=cassandrathrift
titan.hadoop.output.conf.storage.hostname=localhost
titan.hadoop.output.conf.storage.port=9160
titan.hadoop.output.conf.storage.cassandra.keyspace=titan
titan.hadoop.output.conf.storage.batch-loading=false
----

Any configuration setting documented in <<titan-config-ref>> can appear after the `...output.conf.` prefix.

However, when using the ScriptOutputFormat, the output prefix should just contain one key-value pair specifying the path to a Groovy script, e.g.:

[source,properties]
----
titan.hadoop.output.format=com.thinkaurelius.faunus.formats.script.ScriptOutputFormat
titan.hadoop.output.conf.file=writeimpl.groovy
----

In summary, the contents of these two meta-namespace prefixes for input and output customization are determined by the associated format implementation.  The implementation chooses how it wants to interpret its companion conf meta-namespace.

Options specific to Titan-Hadoop's standard input and output format implementations are broken into standalone sections.  For example, the section on Script input and output formats just lists an option with the name "file".  However, when writing a Titan-Hadoop config file, don't just write "file".  That key must be prefixed with either `titan.hadoop.input.conf` or `titan.hadoop.output.conf` to make it meaningful.

Titan-Hadoop General Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


include::../listings/faunus_cfg.txt[]

Titan-Hadoop RDF Options
^^^^^^^^^^^^^^^^^^^^^^^^

This namespace contains options specific to RDFInputFormat and RDFOutputFormat.  They are ignored when using any other format.  The options below must be prefixed with one of the meta-namespaces described in <<hadoop-config-meta-ns>>.

include::../listings/faunus_rdf_cfg.txt[]


Titan-Hadoop Script Options
^^^^^^^^^^^^^^^^^^^^^^^^^^^

This namespace contains options specific to ScriptInputFormat and ScriptOutputFormat.  They are ignored when using any other format.  The options below must be prefixed with one of the meta-namespaces described in <<hadoop-config-meta-ns>>.

include::../listings/faunus_script_cfg.txt[]
