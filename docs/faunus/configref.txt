[[hadoop-config-ref]]
Configuration Reference
-----------------------

This page is the reference for Titan-Hadoop configuration options.

The table is automatically generated by traversing the keys and namespaces in Titan's internal configuration management API. Hence, the configuration options as listed on this page are synchronized with a particular Titan release. If a reference to a configuration option in other parts of this documentation is in conflict with its representation on this page, assume the version listed here to be correct.

[[hadoop-config-meta-ns]]
Configuring Input and Output Formats
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The tables below contain two configuration settings that specify the class used to read and write graph data in Titan-Hadoop:

* titan.hadoop.input.format
* titan.hadoop.output.format

Titan-Hadoop comes with several standard implementations of input and output formats, but in general, these options will accept any class that implements InputFormat or OutputFormat with the appropriate type parameters.

To allow passing arbitrary format-specfic configuration data, Titan-Hadoop defines two special option meta-namespaces:

* titan.hadoop.input.conf
* titan.hadoop.output.conf

These prefixes are reserved for arbitrary use by input and output format implementations.  So, a `titan.hadoop.{in,out}put.conf` valid for one format is not necessarily valid for a different format.

For instance, TitanCassandraOutputFormat uses the output prefix to express a Titan graph configuration, e.g.:

[source,properties]
----
titan.hadoop.output.format=com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraOutputFormat
titan.hadoop.output.conf.storage.backend=cassandrathrift
titan.hadoop.output.conf.storage.hostname=localhost
titan.hadoop.output.conf.storage.port=9160
titan.hadoop.output.conf.storage.cassandra.keyspace=titan
titan.hadoop.output.conf.storage.batch-loading=false
----

In the example above, any configuration setting documented in <<titan-config-ref>> could appear after the `titan.hadoop.output.conf.` prefix.

Consider an alternative example using `ScriptOutputFormat`.  `ScriptOutputFormat` only has one configuration option, `script-file`, which points to a Gremlin script file.  It doesn't understand `TitanGraph` configuration options.  Here's a configuration snippet showing `ScriptOutputFormat` and `script-file`:

[source,properties]
----
titan.hadoop.output.format=com.thinkaurelius.titan.hadoop.formats.script.ScriptOutputFormat
titan.hadoop.output.conf.script-file=writeimpl.groovy
----

In summary, the input/output format implementation determines the set of meaningful config options in its companion conf meta-namespace.


Titan-Hadoop General Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

include::../listings/faunus_cfg.txt[]

Titan-Hadoop RDF Options
~~~~~~~~~~~~~~~~~~~~~~~~

This namespace contains options specific to RDFInputFormat and RDFOutputFormat.  They are ignored when using any other format.  The options below must be prefixed with one of the meta-namespaces described in <<hadoop-config-meta-ns>>.

include::../listings/faunus_rdf_cfg.txt[]


Titan-Hadoop Script Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~

This namespace contains options specific to ScriptInputFormat and ScriptOutputFormat.  They are ignored when using any other format.  The options below must be prefixed with one of the meta-namespaces described in <<hadoop-config-meta-ns>>.

include::../listings/faunus_script_cfg.txt[]
