[[advanced-blueprints]]
Advanced Blueprints
-------------------

//image:https://raw.github.com/tinkerpop/blueprints/master/doc/images/blueprints-character-3.png[]

http://blueprints.tinkerpop.com/[Blueprints] provides a set of common property graph interfaces by which any vendor can implement and leverage the http://tinkerpop.com[TinkerPop] stack of technologies. Within Blueprints, there are other utilities that are generally useful like import/export formats as well graph wrappers.

Using IdGraph
~~~~~~~~~~~~~

It is possible to use Blueprints' https://github.com/tinkerpop/blueprints/wiki/Id-Implementation[IdGraph] with Titan. However, it is best to prepare Titan for IdGraph by declaring the `__id` index using `TitanGraph.makeType()`, and furthermore, it is _necessary_ if you intend to use IdGraph for user-specified ids on _both_ vertices and edges.  Use the appropriate data type (e.g. `String.class`) for the ids you intend to use:

[source,gremlin]
g = TitanFactory.open("berkeleyje:/tmp/test")
mgmt = g.getManagementSystem();
id = mgmt.makeKey(IdGraph.ID).dataType(String.class).make()
mgmt.buildIndex("byvid",Vertex.class).addKey(id).unique().buildCompositeIndex()
mgmt.buildIndex("byeid",Edge.class).addKey(id).unique().buildCompositeIndex()
mgmt.commit()
ig = new IdGraph(g)
hercules = ig.addVertex("hercules")
g.v("hercules")
zeus = ig.addVertex("zeus")
ig.addEdge("hercules-father", hercules, zeus, "father");

If only user defined ids on vertices (or edges) is needed, then use one of the overloaded `IdGraph` constructors.  It is still helpful, although not strictly necessary, to define an index:

[source,gremlin]
ig = new IdGraph(g, true, false)  // true for vertices, false for edges
